#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle ~/.config/emacs/init.el

* Early Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/early-init.el
:END:
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

* Bootstrap
  Bootstrap =straight.el= and load =use-package= for package configuration
  #+begin_src emacs-lisp
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
    (straight-use-package 'use-package)
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src
* Miscellanous Configuration
** Diminish Mode
#+begin_src emacs-lisp
    (use-package diminish
      :straight t
      :config
      (require 'diminish))
#+end_src
** GCMH
#+begin_src emacs-lisp
  (use-package gcmh
    :straight t
    :diminish gcmh-mode
    :config (gcmh-mode 1))
#+end_src

** Backup configuration
   Make sure we don't clutter the current directory with backup saves, keep them all somewhere else
   #+begin_src emacs-lisp
     (setq backup-by-copying t
	   backup-directory-alist '(("." . "~/.saves/"))
	   delete-old-versions t
	   kept-new-versions 6
	   kept-old-versions 2
	   version-control t)
   #+end_src
** Custom file configuration
   Keep a custom file for =customize= functionality, keep it out of init.el
   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (unless (file-exists-p custom-file)
       (write-region "" 0 custom-file))
     (load-file custom-file)
   #+end_src
** Spelling, bell, exec-path, indent, =yes-or-no-p=, etc
   #+begin_src emacs-lisp
     (add-to-list 'exec-path "~/.rustup/toolchains/nightly-aarch64-apple-darwin/bin/")
     (setq ispell-program-name "aspell")
     (setq ring-bell-function 'ignore)
     (defalias 'yes-or-no-p #'y-or-n-p)
     (setq-default indent-tabs-mode nil)
     (setq mac-command-modifier 'meta)
   #+end_src

* Utilities
  #+begin_src emacs-lisp
    (use-package ace-window
      :straight t
      :bind ("M-o" . ace-window))

    (use-package projectile
      :straight t
      :bind-keymap ("C-c p" . projectile-command-map)
      :config
      (projectile-mode 1))

    (use-package which-key
      :straight t
      :diminish which-key-mode
      :config
      (which-key-mode 1))

    (use-package direnv
      :straight t
      :config (direnv-mode))

    (use-package eyebrowse
      :straight t)
  #+end_src
   
* Aesthetics
  #+begin_src emacs-lisp
    (use-package moe-theme
      :straight t
      :config (moe-dark))

    (menu-bar-mode (if (eq system-type 'darwin) 1 -1))
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-frame-font "Iosevka 14")
  #+end_src

* Helm
The decision over helm vs ivy is something I need to figure out,
currently I'm using Helm.

The ~display-bufer-alist~ configuration makes helm appear at the bottom of the screen
  #+begin_src emacs-lisp
    (use-package helm
      :straight t
      :diminish helm-mode
      :bind (("M-x" . helm-M-x)
             ("C-x C-f" . helm-find-files))
      :config
      (helm-mode 1)
      (add-to-list 'display-buffer-alist
                   `(,(rx bos "*helm" (* not-newline) "*" eos)
                     (display-buffer-in-side-window)
                     (inhibit-same-window . t)
                     (window-height . 0.3))))

    (use-package helm-swoop
      :straight t
      :bind (("M-i" . helm-swoop)
             ("M-I" . helm-swoop-back-to-last-point)
             ("C-c M-i" . helm-multi-swoop)
             ("C-x M-i" . helm-multi-swoop-all)
             :map isearch-mode-map
             ("M-i" . helm-swoop-from-isearch)
             :map helm-swoop-map
             ("M-i" . helm-multi-swoop-all-from-helm-swoop)
             ("M-m" . helm-multi-swoop-current-mode-from-helm-swoop)
             ("C-r" . helm-previous-line)
             ("C-s" . helm-next-line)
             :map helm-multi-swoop-map
             ("C-r" . helm-previous-line)
             ("C-s" . helm-next-line))
      :config
      (setq helm-multi-swoop-edit-save t))

    (use-package helm-ag
      :straight t)
#+end_src

* Programming
** Utilities
   #+begin_src emacs-lisp
     (use-package magit
       :straight t)

     (use-package company
       :straight t
       :diminish company-mode
       :hook ((after-init . global-company-mode)))

     (use-package flycheck
       :straight t
       :diminish flycheck-mode
       :config
       (global-flycheck-mode 1))

     (use-package yasnippet
       :straight t
       :diminish yas-minor-mode
       :config
       (yas-global-mode 1))

     (use-package yasnippet-snippets
       :straight t)
   #+end_src
*** Tree sit
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '(  ; use `sort-lines' to sort
          (bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (rust "https://github.com/tree-sitter/tree-sitter-rust")
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (haskell . ("https://github.com/tree-sitter/tree-sitter-haskell"))
          (typst "https://github.com/uben0/tree-sitter-typst")
          (vue "https://github.com/ikatyang/tree-sitter-vue")))

  (defun nf/treesit-install-all-languages ()
    "Install all languages specified by `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
              (treesit-install-language-grammar lang)
              (message "`%s' parser was installed." lang)
              (sit-for 0.75))))
#+end_src
** LSP
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :straight t
       :init
       (setq lsp-keymap-prefix "C-c l")
       :hook ((lsp-mode . lsp-enable-which-key-integration))
       :commands lsp)

     (use-package lsp-ui :straight t)

     (use-package helm-lsp
       :straight t
       :commands hlm-lsp-workspace-symbol)

     (use-package dap-mode
       :straight t)
   #+end_src
** Languages
*** Python
*** C/C++
*** Rust
    #+begin_src emacs-lisp
      (use-package rust-mode
        :straight t
        :hook (rust-mode . lsp)
        :config
        (setq lsp-rust-server 'rust-analyzer))
    #+end_src
*** Nix
    #+begin_src emacs-lisp
      (use-package nix-mode
	:straight t)
    #+end_src
*** Javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :straight t
    :hook (js2-mode . lsp))
#+end_src
*** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :straight t)

  (defun setup-tide-fn ()
    (interactive)
    (tide-setup)
    (flycheck-mode 1)
    (eldoc-mode 1)
    (tide-hl-identifier-mode 1)
    (company-mode +1))

  (use-package tide
    :straight t
    :hook (typescript-mode . #'setup-tide-fn))
#+end_src

#+RESULTS:
*** Web mode
*** Haskell
    #+begin_src emacs-lisp
      (use-package lsp-haskell
        :straight t)
      (use-package haskell-mode
        :straight t
        :hook (haskell-mode . lsp))
    #+end_src

* Org Mode
  #+begin_src emacs-lisp
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
  #+end_src
