#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle ~/.config/emacs/init.el

* Early Init
# :PROPERTIES:
# :header-args: :tangle ~/.config/emacs/early-init.el
# :END:
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

* Bootstrap
Bootstrap =straight.el= and load =use-package= for package configuration
#+begin_src emacs-lisp
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Miscellanous Configuration
** Diminish Mode
#+begin_src emacs-lisp
  (use-package diminish
    :straight t
    :config
    (require 'diminish))
#+end_src

** GCMH
#+begin_src emacs-lisp
  (use-package gcmh
    :straight t
    :diminish gcmh-mode
    :config (gcmh-mode 1))
#+end_src

** Backup configuration
Make sure we don't clutter the current directory with backup saves,
keep them all somewhere else
#+begin_src emacs-lisp
  (setq backup-by-copying t
        backup-directory-alist '(("." . "~/.saves/"))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+end_src

** Custom file configuration
Keep a custom file for =customize= functionality, keep it out of init.el
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (write-region "" 0 custom-file))
  (load-file custom-file)
#+end_src

** Re-use windows for buffer changing
#+begin_src emacs-lisp
  (customize-set-variable 'display-buffer-base-action
                          '((display-buffer-reuse-window display-buffer-same-window)
                            (reusable-frames . t)))

  (customize-set-variable 'even-window-sizes nil)
#+end_src

** Spelling, bell, exec-path, indent, =yes-or-no-p=, etc
#+begin_src emacs-lisp
  (setq ispell-program-name "aspell")
  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p #'y-or-n-p)
 (setq-default indent-tabs-mode nil)
#+end_src

* Utilities
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :bind ("M-o" . ace-window))

  (use-package projectile
    :straight t
    :bind-keymap ("C-c p" . projectile-command-map)
    :config
    (projectile-mode 1))

  (use-package which-key
    :straight t
    :diminish which-key-mode
    :config
    (which-key-mode 1))

  (use-package direnv
    :straight t
    :config (direnv-mode))

  (use-package perspective
    :straight t
    :bind ("C-x C-b" . persp-list-buffers)
    :custom (persp-mode-prefix-key (kbd "C-x x"))
    :init (persp-mode 0))

  (use-package winner
    :config (winner-mode 1))

  (use-package avy
    :straight t
    :bind (("C-;" . avy-goto-char-1)
           ("C-:" . avy-goto-char-2)
           ("C-'" . avy-goto-char-timer))
    :config (require 'avy))

  (use-package undo-tree
    :straight t
    :diminish undo-tree-mode
    :config
    (let ((save-dir (concat user-emacs-directory "undotree/")))
      (unless (file-exists-p save-dir)
        (make-directory save-dir))
      (setq undo-tree-history-directory-alist (cl-acons "." save-dir nil)))
    (global-undo-tree-mode 1))

  (use-package frames-only-mode
    :straight t
    :custom
    ((frames-only-mode-kill-frame-when-buffer-killed-buffer-list
      `("*RefTeX Select*" "*Help*" "*Popup Help*" "*Completions*" (regexp . ,(rx bos "CAPTURE-"))))
     (frames-only-mode-use-window-functions
      (list #'calendar #'report-emacs-bug 'checkdoc-show-diagnostics 'checkdoc 'org-compile-file 'corfu-popupinfo--show 'org-capture)))
    :init
    (frames-only-mode t))
#+end_src

* Aesthetics
#+begin_src emacs-lisp
  (use-package base16-theme
    :straight t
    :config
    (load-theme 'base16-monokai t))

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (add-to-list 'default-frame-alist '(font . "Iosevka Nerd Font 12"))
  (set-frame-font "Iosevka Nerd Font 12" nil t)
#+end_src

* Helm
The decision over helm vs ivy is something I need to figure out,
currently I'm using Helm.

The ~display-buffer-alist~ configuration makes helm appear at the
bottom of the screen
#+begin_src emacs-lisp
  (use-package helm
    :straight t
    :diminish helm-mode
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files))
    :config
    (helm-mode 1)
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*helm" (* not-newline) "*" eos)
                   (display-buffer-in-side-window)
                   (inhibit-same-window . t)
                   (window-height . 0.3))))

  (use-package helm-swoop
    :straight t
    :bind (("M-i" . helm-swoop)
           ("M-I" . helm-swoop-back-to-last-point)
           ("C-c M-i" . helm-multi-swoop)
           ("C-x M-i" . helm-multi-swoop-all)
           :map isearch-mode-map
           ("M-i" . helm-swoop-from-isearch)
           :map helm-swoop-map
           ("M-i" . helm-multi-swoop-all-from-helm-swoop)
           ("M-m" . helm-multi-swoop-current-mode-from-helm-swoop)
           ("C-r" . helm-previous-line)
           ("C-s" . helm-next-line)
           :map helm-multi-swoop-map
           ("C-r" . helm-previous-line)
           ("C-s" . helm-next-line))
    :config
    (setq helm-multi-swoop-edit-save t))

  (use-package helm-ag
    :straight t)
#+end_src

* Programming
** Utilities
#+begin_src emacs-lisp
  (use-package magit
    :straight t)

  (use-package company
    :straight t
    :diminish company-mode
    :hook ((after-init . global-company-mode)))

  (use-package flycheck
    :straight t
    :diminish flycheck-mode
    :config
    (global-flycheck-mode 1))

  (use-package yasnippet
    :straight t
    :diminish yas-minor-mode
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :straight t)
#+end_src

*** Tree sit
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '(  ; use `sort-lines' to sort
          (bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (rust "https://github.com/tree-sitter/tree-sitter-rust")
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (haskell . ("https://github.com/tree-sitter/tree-sitter-haskell"))
          (typst "https://github.com/uben0/tree-sitter-typst")
          (vue "https://github.com/ikatyang/tree-sitter-vue")))

  (defun nf/treesit-install-all-languages ()
    "Install all languages specified by `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
        (treesit-install-language-grammar lang)
        (message "`%s' parser was installed." lang)
        (sit-for 0.75))))
#+end_src

** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-modeline-diagnostics-scope :workspace)
    (lsp-modeline-code-actions-mode 1)
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode)

  (use-package helm-lsp
    :straight t
    :commands hlm-lsp-workspace-symbol)

  (use-package dap-mode
    :straight t
    :after lsp-mode
    :config (dap-auto-configure-mode))
#+end_src

** Languages
*** Dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :straight t)
#+end_src

*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :straight t
    :hook (rust-mode . lsp)
    :config
    (setq lsp-rust-server 'rust-analyzer))
#+end_src

*** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t)
#+end_src

*** Javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :straight t
    :hook (js2-mode . lsp))
#+end_src

*** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :straight t)

  (defun setup-tide-fn ()
    (interactive)
    (tide-setup)
    (flycheck-mode 1)
    (eldoc-mode 1)
    (tide-hl-identifier-mode 1)
    (company-mode +1))

  (use-package tide
    :straight t
    :hook (typescript-mode . #'setup-tide-fn))
#+end_src

*** Haskell
#+begin_src emacs-lisp
  (use-package lsp-haskell
    :straight t)
  (use-package haskell-mode
    :straight t
    :hook (haskell-mode . lsp))
#+end_src

*** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t)
#+end_src

* mu
installed out of band with nix :/
#+begin_src emacs-lisp
  (require 'mu4e)
#+end_src

* Meow Mode
#+begin_src emacs-lisp
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  (use-package meow
    :straight t
    :config
    (require 'meow)
    (meow-setup)
    (meow-global-mode 1))
#+end_src

* Org Mode
#+begin_src emacs-lisp
  (add-hook 'org-mode 'turn-on-auto-fill)
  (org-clock-persistence-insinuate)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
  (setq org-log-done t
        org-clock-persist 'historycc
        org-directory "~/org/"
        org-agenda-files (list "todo.org")
        org-refile-targets '((nil . (:maxlevel 5)))
        org-agenda-search-view-max-outline-level 3
        org-capture-templates
        '(("t" "Add Task" entry (file+headline "todo.org" "Inbox")
           "** TODO %?\n:PROPERTIES:\n:ENTERED: %u\n:END:\n")
          ("n" "Add Note" entry (file+headline "todo.org" "Inbox")
           "** %?\n:PROPERTIES:\n:CATEGORY: Note\n:ENTERED: %u\n:END:\n"))
        org-tags-exclude-from-inheritance (list "project")
        org-todo-keywords '((sequence "TODO(t)"    ;; Later
                                      "NEXT(n)"    ;; Now
                                      "|"          ;;
                                      "DONE(d!)"   ;; Completed
                                      )
                            (sequence "WAIT(w@/!)" ;; Waiting on someone else
                                      "BLCK(b@/!)" ;; Blocked by something
                                      "APPT"       ;; Is an Appointment
                                      "FUTR"       ;; Maybe Someday
                                      "|"          ;;
                                      "CANC(c@)"   ;; Cancelled
                                      "NOTE"       ;; Its a note
                                      )))

  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))

  (setq org-crypt-key nil)
  (add-to-list 'display-buffer-alist `(,(rx bos "CAPTURE-" (* not-newline) eos)
                                       (display-buffer-pop-up-frame)))

  (defun cb/capture ()
    (interactive)
    (let ((display-buffer-alist `(("*Org Select*" (display-buffer-pop-up-frame)))))
      (org-capture)))
#+end_src

