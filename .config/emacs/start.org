#+TITLE: Emacs Startup

* Bootstrap
  Bootstrap =straight.el= and load =use-package= for package configuration

  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
    (straight-use-package 'use-package)
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src

* Miscellanous Configuration
** Backup configuration
   Make sure we don't clutter the current directory with backup saves, keep them all somewhere else
   #+begin_src emacs-lisp
     (setq backup-by-copying t
	   backup-directory-alist '(("." . "~/.saves/"))
	   delete-old-versions t
	   kept-new-versions 6
	   kept-old-versions 2
	   version-control t)
   #+end_src
** Custom file configuration
   Keep a custom file for =customize= functionality, keep it out of init.el
   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (unless (file-exists-p custom-file)
       (write-region "" 0 custom-file))
     (load-file custom-file)
   #+end_src
** Spelling, bell, and =yes-or-no-p=
   #+begin_src emacs-lisp
     (setq ispell-program-name "aspell")
     (setq ring-bell-function 'ignore)
     (defalias 'yes-or-no-p #'y-or-n-p)
   #+end_src

* Utilities
  #+begin_src emacs-lisp
    (use-package ace-window
      :straight t
      :bind ("M-o" . ace-window))

    (use-package projectile
      :straight t
      :bind-keymap ("C-c p" . projectile-command-map)
      :config
      (projectile-mode 1))

    (use-package which-key
      :straight t
      :config
      (which-key-mode 1))
  #+end_src
   
* Aesthetics
  #+begin_src emacs-lisp
    (use-package gruvbox-theme
      :straight t
      :config
      (load-theme 'gruvbox t))
    (menu-bar-mode 1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-frame-font "Iosevka 16")
  #+end_src
* Completion
  #+begin_src emacs-lisp
    (use-package helm
      :straight t
      :bind (("M-x" . helm-M-x)
	     ("C-x C-f" . helm-find-files))
      :config
      (helm-mode 1)
      (add-to-list 'display-buffer-alist
			`(,(rx bos "*helm" (* not-newline) "*" eos)
			     (display-buffer-in-side-window)
			     (inhibit-same-window . t)
			     (window-height . 0.3))))
  #+end_src
* Programmingd
** Utilities
   #+begin_src emacs-lisp
     (use-package magit
       :straight t)

     (use-package company
       :straight t
       :hook ((after-init . global-company-mode)))

     (use-package flycheck
       :straight t
       :config
       (global-flycheck-mode 1))

     (use-package yasnippet
       :straight t
       :config
       (yas-global-mode 1))

     (use-package yasnippet-snippets
       :straight t)
   #+end_src
** LSP
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :straight t
       :init
       (setq lsp-keymap-prefix "C-c l")
       :hook ((lsp-mode . lsp-enable-which-key-integration))
       :commands lsp)

     (use-package helm-lsp
       :straight t
       :commands hlm-lsp-workspace-symbol)

     (use-package dap-mode
       :straight t)
   #+end_src
** Languages
*** Rust
    #+begin_src emacs-lisp
      (use-package rust-mode
	:straight t
	:config
	(setq lsp-rust-server 'rust-analyzer))
    #+end_src
*** Nix
    #+begin_src emacs-lisp
      (use-package nix-mode
	:straight t)
    #+end_src

* Org Mode
  #+begin_src emacs-lisp
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
  #+end_src
