#+TITLE: Software and how I use it

* Emacs
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/init.el
:END:

Why do I use emacs? To be quite honest, I have absolultely no
Idea. Perhaps I'm insane or masochistic, more than likely, I am a bit
of both. At this point with all the time invested in it, nothing can
do quite as much. VS code has too complicated of a ui and isn't nearly
as keyboard driven. I dislike certain aspects of vi and its
descendants, especially their adherence to the "unix philosophy," or
the twisted spectre it currently takes. Neovim is interested but still
lacks some things: primarily magit and org mode replacements.

I also dislike emacs, for the record. 

** Early Init
:PROPERTIES:
:header-args: :tangle ~/.config/emacs/early-init.el
:END:
We use GCMH which will reset this. So lets get a bit of a quicker
start by just not picking up our trash. Punk house memory managment.

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

** Bootstrap
  Bootstrap =straight.el= and load =use-package= for package
  configuration.  I don't really know why I started using straight, I
  guess not relying on melpa or something. Localized git repos by
  default also help if something breaks and I have to dig into the
  code. Ideally, this never happens.

  #+begin_src emacs-lisp
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
    (straight-use-package 'use-package)
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src

** Miscellanous Configuration
*** GCMH
Adaptive garbage collector or something. I should figure out if this
is actually worth it.
#+begin_src emacs-lisp
  (use-package gcmh :straight t :config (gcmh-mode 1))
#+end_src

*** Backup configuration
   Make sure we don't clutter the current directory with backup saves, keep them all somewhere else
   #+begin_src emacs-lisp
     (setq backup-by-copying t
	   backup-directory-alist '(("." . "~/.saves/"))
	   delete-old-versions t
	   kept-new-versions 6
	   kept-old-versions 2
	   version-control t)
   #+end_src
*** Custom file configuration
   Keep a custom file for =customize= functionality, keep it out of init.el
   Note: does anyone actually use customize? Still, used for some stuff internally I suppose
   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (unless (file-exists-p custom-file)
       (write-region "" 0 custom-file))
     (load-file custom-file)
   #+end_src
*** Spelling, bell, exec-path, indent, and =yes-or-no-p=
Various miscellanous settings, mostly don't yell at me and make me
type a whole three characters. That's just silly.
   #+begin_src emacs-lisp
     (setq ispell-program-name "aspell")
     (setq ring-bell-function 'ignore)
     (defalias 'yes-or-no-p #'y-or-n-p)
     (setq-default indent-tabs-mode nil)
   #+end_src

** Utilities
  I don't like emacs default emacs windows management; being able to quickly change to another window is great though.
  Projectile is great for project managment. Which key because I forget the keybindings all the time
  #+begin_src emacs-lisp
    (use-package ace-window
      :straight t
      :bind ("M-o" . ace-window))

    (use-package projectile
      :straight t
      :bind-keymap ("C-c p" . projectile-command-map)
      :config
      (projectile-mode 1))

    (use-package which-key
      :straight t
      :config
      (which-key-mode 1))
  #+end_src
   
** Aesthetics
  Because staring at a sea of monospaced fonts should at least be easy
  on the eyes. Also remove all that GUI clutter.
  #+begin_src emacs-lisp
    (use-package nord-theme
      :straight t
      :config (load-theme 'nord t))

    (menu-bar-mode (if (eq system-type 'darwin) 1 -1))
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-frame-font "Inconsolata 16")
  #+end_src
** Completion
  I prefer helm to ivy. No particulary reason.
  #+begin_src emacs-lisp
    (use-package helm
      :straight t
      :bind (("M-x" . helm-M-x)
	     ("C-x C-f" . helm-find-files))
      :config
      (helm-mode 1)
      (add-to-list 'display-buffer-alist
			`(,(rx bos "*helm" (* not-newline) "*" eos)
			     (display-buffer-in-side-window)
			     (inhibit-same-window . t)
			     (window-height . 0.3))))
  #+end_src
** Meow Mode
*** TODO Figure out if I actually want to dedicate to this?
** Programming
*** Utilities
   #+begin_src emacs-lisp
     (use-package magit
       :straight t)

     (use-package company
       :straight t
       :hook ((after-init . global-company-mode)))

     (use-package flycheck
       :straight t
       :config
       (global-flycheck-mode 1))

     (use-package yasnippet
       :straight t
       :config
       (yas-global-mode 1))

     (use-package yasnippet-snippets
       :straight t)
   #+end_src
*** LSP
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :straight t
       :init
       (setq lsp-keymap-prefix "C-c l")
       :hook ((lsp-mode . lsp-enable-which-key-integration))
       :commands lsp)

     (use-package lsp-ui :straight t)

     (use-package helm-lsp
       :straight t
       :commands hlm-lsp-workspace-symbol)

     (use-package dap-mode
       :straight t)
   #+end_src
*** Languages
**** Python
**** C/C++
**** Rust
    #+begin_src emacs-lisp
      (use-package rust-mode
        :straight t
        :hook (rust-mode . lsp)
        :config
        (setq lsp-rust-server 'rust-analyzer))
    #+end_src
**** Nix
    #+begin_src emacs-lisp :ignore
      (use-package nix-mode
	:straight t)
    #+end_src
**** Javascript
#+begin_src emacs-lisp
  (use-package js2-mode
    :straight t
    :hook (js2-mode . lsp))
#+end_src
**** Haskell
    #+begin_src emacs-lisp :ignore
      (use-package lsp-haskell
        :straight t)
      (use-package haskell-mode
        :straight t
        :hook (haskell-mode . lsp))
    #+end_src

** Org Mode
  I should really flesh this out more... oh well I don't actually know
  how to use a computer any more.
  #+begin_src emacs-lisp
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
  #+end_src
